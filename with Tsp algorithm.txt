% Define the size of the farmland
farmland_size_sqm = 202300; % in square meters

% Number of sensors for each type
num_sensors = 25;

% Generate random coordinates for all sensors
all_sensors_x = rand(1, num_sensors * 3) * farmland_size_sqm;
all_sensors_y = rand(1, num_sensors * 3) * farmland_size_sqm;

% Combine x and y coordinates
all_sensors = [all_sensors_x; all_sensors_y];

% Plot all sensors
figure;
hold on;

% Plot soil sensors
scatter(all_sensors_x(1:num_sensors), all_sensors_y(1:num_sensors), 50, 'g', 'filled');

% Plot moisture sensors
scatter(all_sensors_x(num_sensors+1:2*num_sensors), all_sensors_y(num_sensors+1:2*num_sensors), 50, 'b', 'filled');

% Plot crop health sensors
scatter(all_sensors_x(2*num_sensors+1:end), all_sensors_y(2*num_sensors+1:end), 50, 'r', 'filled');

xlabel('X Coordinate (m)');
ylabel('Y Coordinate (m)');
title('Sensor Locations');
grid on;

% Plot base station (outside the field)
base_station_x = -100; % 100 meters away from the boundary
base_station_y = -100;

% Plot base station
scatter(base_station_x, base_station_y, 100, 'k', 'filled');
legend('Soil Sensors', 'Moisture Sensors', 'Crop Health Sensors', 'Base Station');

% Initialize animation frames
frames = struct('cdata', [], 'colormap', []);

% Visit all sensors using TSP (Nearest Neighbor Algorithm)
remaining_nodes = 1:size(all_sensors, 2);
path = []; % Start with an empty path
current_x = base_station_x;
current_y = base_station_y;

while ~isempty(remaining_nodes)
    % Find nearest sensor
    distances = sqrt((current_x - all_sensors(1, remaining_nodes)).^2 + (current_y - all_sensors(2, remaining_nodes)).^2);
    [~, nearest_idx] = min(distances);
    nearest_node = remaining_nodes(nearest_idx);
    
    % Add nearest sensor to path
    path(end+1) = nearest_node;
    remaining_nodes(nearest_idx) = [];
    
    % Update current position
    current_x = all_sensors(1, nearest_node);
    current_y = all_sensors(2, nearest_node);
end
% Plot drone movement from base station to the first sensor
plot([base_station_x, all_sensors(1, path(1))], [base_station_y, all_sensors(2, path(1))], 'm', 'LineWidth', 2); % Magenta color for drone path
drawnow;
frames(end+1) = getframe(gcf);

% Plot drone movement between sensors
for i = 1:length(path)-1
    % Plot drone movement to the sensor
    plot([all_sensors(1, path(i)), all_sensors(1, path(i+1))], [all_sensors(2, path(i)), all_sensors(2, path(i+1))], 'm', 'LineWidth', 2); % Magenta color for drone path
    drawnow;
    frames(end+1) = getframe(gcf);
end

% Return to the base station
plot([all_sensors(1, path(end)), base_station_x], [all_sensors(2, path(end)), base_station_y], 'm', 'LineWidth', 2); % Magenta color for drone path
drawnow;
frames(end+1) = getframe(gcf);

% Calculate total distance traveled
total_distance = 0;
for i = 1:length(path)-1
    total_distance = total_distance + sqrt((all_sensors(1, path(i+1)) - all_sensors(1, path(i)))^2 + (all_sensors(2, path(i+1)) - all_sensors(2, path(i)))^2);
end

% Add the distance from the last sensor back to the base station
total_distance = total_distance + sqrt((all_sensors(1, path(end)) - base_station_x)^2 + (all_sensors(2, path(end)) - base_station_y)^2);

% Convert total distance to kilometers
total_distance_km = total_distance / 1000;

% Calculate estimated time taken
drone_speed = 34.8; % meters per second (adjust according to your drone's speed)
time_taken_seconds = total_distance / drone_speed;
time_taken_minutes = time_taken_seconds / 60; % Convert seconds to minutes

% Display total distance traveled and estimated time taken
fprintf('Total distance traveled by the drone: %.2f kilometers\n', total_distance_km);
fprintf('Estimated time taken by the drone: %.2f minutes\n', time_taken_minutes);


